from __future__ import annotations

from aiogram import F, Router, Bot
from aiogram.enums import ChatType
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, ChatPermissions
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.

–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º/—Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ/–≤–æ–∑–≤—Ä–∞—Ç–µ
–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –æ—á–∏—â–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.
"""

from .config import Settings
from .subscription import SubscriptionService
from .keyboards import subscription_keyboard
from .cache import TTLMemoryCache, TTLKVCache
from .storage import ConfigStore
import logging
import asyncio
import html


router = Router(name="mandatory-subscription")
_notice_cache = TTLMemoryCache()
_last_notice_message = TTLKVCache()
_welcomed_cache = TTLMemoryCache()
logger = logging.getLogger("handlers")


def setup_handlers(settings: Settings, subs: SubscriptionService) -> Router:
    store = ConfigStore(settings.config_store_path)
    
    def _is_target_chat(current_chat_id: int, target_chat_id: int | None) -> bool:
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç —Å —Ü–µ–ª–µ–≤—ã–º, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—Ä–∏–∞–Ω—Ç—ã ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã (-id –∏ -100id)."""
        if target_chat_id is None:
            return True
        if current_chat_id == target_chat_id:
            return True
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º –±–µ–∑ –∑–Ω–∞–∫–∞
        try:
            abs_target = str(abs(int(target_chat_id)))
            abs_current = str(abs(int(current_chat_id)))
        except Exception:
            return False
        # –í –∫–æ–Ω—Ñ–∏–≥–µ -id, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ -100id
        if not abs_target.startswith("100") and abs_current == ("100" + abs_target):
            return True
        # –í –∫–æ–Ω—Ñ–∏–≥–µ -100id, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ -id
        if abs_target.startswith("100") and abs_target[3:] == abs_current:
            return True
        return False
    
    async def _delete_message_later(bot: Bot, chat_id: int, message_id: int, delay_seconds: int = 20) -> None:
        await asyncio.sleep(delay_seconds)
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception:
            pass
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–≤–µ—Ä—è–µ–º—Å—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    @router.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
    async def guard_message(message: Message) -> None:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ
        if message.from_user is None or message.from_user.is_bot:
            return
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥ –∏ —Ç.–ø.) ‚Äî –¥–ª—è –Ω–∏—Ö –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        if getattr(message, "new_chat_members", None) or getattr(message, "left_chat_member", None):
            return
        target_chat_id = await store.get_chat_id()
        # –ß–∞—Ç –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é ‚Äî –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è
        if target_chat_id is None:
            logger.debug("guard_message: target_chat_id not set; skip")
            return
        # –ù–µ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not _is_target_chat(message.chat.id, target_chat_id):
            return
        user_id = message.from_user.id
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Å—Å–µ–¥–∂ (–µ—Å–ª–∏ join-—Å–æ–±—ã—Ç–∏—è —Å–∫—Ä—ã—Ç—ã)
        welcome_key = f"welcomed:{message.chat.id}:{user_id}"
        if not await _welcomed_cache.contains(welcome_key):
            user_name = html.escape(getattr(message.from_user, "full_name", None) or getattr(message.from_user, "first_name", None) or "—É—á–∞—Å—Ç–Ω–∏–∫")
            mention = f'<a href="tg://user?id={message.from_user.id}">{user_name}</a>'
            greet_text = mention + ": –ü—Ä–∏–≤–µ—Ç ü¶ä\u202F–î–µ–ª–∞–π –≤–∑–∞–∏–º–∫—É —Ç—É—Ç, –∏ –∞–∫—Ç–∏–≤ —Ç–µ–±–µ –æ–±–µ—Å–ø–µ—á–µ–Ω! –î–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ! üöÄ"
            try:
                sent_greet = await message.answer(greet_text)
                asyncio.create_task(_delete_message_later(message.bot, message.chat.id, sent_greet.message_id, 20))
                await _welcomed_cache.set_until(welcome_key, 604800)  # 7 –¥–Ω–µ–π
                logger.info("guard_message: fallback greeting sent to user %s in chat %s", user_id, message.chat.id)
            except Exception:
                pass
        if await subs.is_fully_subscribed(user_id):
            logger.debug("guard_message: user %s is subscribed", user_id)
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            key = f"notice:{message.chat.id}:{user_id}"
            msg_id = await _last_notice_message.get(key)
            if msg_id:
                try:
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                except Exception:
                    pass
                await _last_notice_message.delete(key)
            return
        try:
            await message.delete()
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            pass

        # –ê–Ω—Ç–∏—Å–ø–∞–º –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–º–∫–∞—Ö —á–∞—Ç–∞
        key = f"notice:{message.chat.id}:{user_id}"
        if await _notice_cache.contains(key):
            return

        channels_values = await store.list_channels() or settings.required_channels
        # –°—Ç—Ä–æ–∏–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ URL –¥–ª—è –∫–Ω–æ–ø–æ–∫
        readable: list[str] = []
        urls: list[str] = []
        for val in channels_values:
            if val.lstrip("-").isdigit():
                try:
                    chat = await message.bot.get_chat(int(val))
                    if getattr(chat, "username", None):
                        readable.append(f"<a href=\"https://t.me/{chat.username}\">@{chat.username}</a>")
                        urls.append(f"https://t.me/{chat.username}")
                    else:
                        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤ –±–µ–∑ username —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç‚Äë—Å—Å—ã–ª–∫—É (–±–µ–∑ t.me/c fallback)
                        title = getattr(chat, "title", None) or "–∫–∞–Ω–∞–ª"
                        invite_url = None
                        try:
                            invite = await message.bot.create_chat_invite_link(chat_id=chat.id)
                            invite_url = getattr(invite, "invite_link", None)
                        except Exception:
                            invite_url = None
                        if not invite_url:
                            try:
                                export_url = await message.bot.export_chat_invite_link(chat_id=chat.id)
                            except Exception:
                                export_url = None
                            invite_url = export_url
                        if invite_url:
                            readable.append(f"<a href=\"{invite_url}\">{html.escape(title)}</a>")
                            urls.append(invite_url)
                        else:
                            readable.append(html.escape(title))
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî —Å–æ–∑–¥–∞—ë–º/—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç; –±–µ–∑ t.me/c
                    invite_url = None
                    try:
                        invite = await message.bot.create_chat_invite_link(chat_id=int(val))
                        invite_url = getattr(invite, "invite_link", None)
                    except Exception:
                        invite_url = None
                    if not invite_url:
                        try:
                            export_url = await message.bot.export_chat_invite_link(chat_id=int(val))
                        except Exception:
                            export_url = None
                        invite_url = export_url
                    if invite_url:
                        readable.append(f"<a href=\"{invite_url}\">–∫–∞–Ω–∞–ª</a>")
                        urls.append(invite_url)
                    else:
                        readable.append("–∫–∞–Ω–∞–ª")
            else:
                username = val[1:] if val.startswith("@") else val
                readable.append(f"<a href=\"https://t.me/{username}\">@{username}</a>")
                urls.append(f"https://t.me/{username}")

        # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        user_name = html.escape(getattr(message.from_user, "full_name", None) or getattr(message.from_user, "first_name", None) or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        mention = f'<a href="tg://user?id={message.from_user.id}">{user_name}</a>'
        text = (
            f"{mention}, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª(—ã):\n"
            + " | ".join(readable)
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = await message.answer(
            text=text,
            reply_markup=subscription_keyboard(urls),
            disable_web_page_preview=True,
        )
        await _notice_cache.set_until(key, settings.notify_ttl_seconds)
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º id –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ (—Ö—Ä–∞–Ω–∏–º 1 —á–∞—Å)
        await _last_notice_message.set(key, reminder.message_id, 3600)
        logger.info("notice sent to user %s in chat %s", user_id, message.chat.id)
        # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ ~20 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(_delete_message_later(message.bot, message.chat.id, reminder.message_id, 20))

    # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    @router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))
    async def on_leave_required_channel(event: ChatMemberUpdated, bot: Bot) -> None:
        chat = event.chat
        # –ö–∞–Ω–∞–ª—ã —Å–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        channels = await store.list_channels() or settings.required_channels
        required_usernames = {c.lower() for c in channels if not c.lstrip("-").isdigit()}
        required_ids = {int(c) for c in channels if c.lstrip("-").isdigit()}
        username = ("@" + chat.username.lower()) if getattr(chat, "username", None) else None
        if (username and username in required_usernames) or (chat.id in required_ids):
            user_id = event.new_chat_member.user.id
            # –ë–æ–ª—å—à–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç —Å –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                target_chat_id = await store.get_chat_id()
                if target_chat_id is None:
                    return
                key = f"notice:{target_chat_id}:{user_id}"
                if await _notice_cache.contains(key):
                    return

                channels_values = await store.list_channels() or settings.required_channels
                readable: list[str] = []
                urls: list[str] = []
                for val in channels_values:
                    if val.lstrip("-").isdigit():
                        try:
                            ch = await bot.get_chat(int(val))
                            if getattr(ch, "username", None):
                                readable.append(f"<a href=\"https://t.me/{ch.username}\">@{ch.username}</a>")
                                urls.append(f"https://t.me/{ch.username}")
                            else:
                                title = getattr(ch, "title", None) or "–∫–∞–Ω–∞–ª"
                                invite_url = None
                                try:
                                    invite = await bot.create_chat_invite_link(chat_id=ch.id)
                                    invite_url = getattr(invite, "invite_link", None)
                                except Exception:
                                    invite_url = None
                                if not invite_url:
                                    try:
                                        export_url = await bot.export_chat_invite_link(chat_id=ch.id)
                                    except Exception:
                                        export_url = None
                                    invite_url = export_url
                                if invite_url:
                                    readable.append(f"<a href=\"{invite_url}\">{html.escape(title)}</a>")
                                    urls.append(invite_url)
                                else:
                                    readable.append(html.escape(title))
                        except Exception:
                            invite_url = None
                            try:
                                invite = await bot.create_chat_invite_link(chat_id=int(val))
                                invite_url = getattr(invite, "invite_link", None)
                            except Exception:
                                invite_url = None
                            if not invite_url:
                                try:
                                    export_url = await bot.export_chat_invite_link(chat_id=int(val))
                                except Exception:
                                    export_url = None
                                invite_url = export_url
                            if invite_url:
                                readable.append(f"<a href=\"{invite_url}\">–∫–∞–Ω–∞–ª</a>")
                                urls.append(invite_url)
                            else:
                                readable.append("–∫–∞–Ω–∞–ª")
                    else:
                        un = val[1:] if val.startswith("@") else val
                        readable.append(f"<a href=\"https://t.me/{un}\">@{un}</a>")
                        urls.append(f"https://t.me/{un}")

                user = event.new_chat_member.user
                user_name = html.escape(getattr(user, "full_name", None) or getattr(user, "first_name", None) or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                mention = f'<a href="tg://user?id={user.id}">{user_name}</a>'
                text = (
                    f"{mention}, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª(—ã):\n"
                    + " | ".join(readable)
                )
                reminder = await bot.send_message(
                    chat_id=target_chat_id,
                    text=text,
                    reply_markup=subscription_keyboard(urls),
                    disable_web_page_preview=True,
                )
                await _notice_cache.set_until(key, settings.notify_ttl_seconds)
                await _last_notice_message.set(key, reminder.message_id, 3600)
                logger.info("notice sent (leave event) to user %s in chat %s", user_id, target_chat_id)
                # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ ~20 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(_delete_message_later(bot, target_chat_id, reminder.message_id, 20))
            except Exception:
                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                pass

    # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    @router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
    async def on_join_required_channel(event: ChatMemberUpdated, bot: Bot) -> None:
        chat = event.chat
        channels = await store.list_channels() or settings.required_channels
        required_usernames = {c.lower() for c in channels if not c.lstrip("-").isdigit()}
        required_ids = {int(c) for c in channels if c.lstrip("-").isdigit()}
        username = ("@" + chat.username.lower()) if getattr(chat, "username", None) else None
        if (username and username in required_usernames) or (chat.id in required_ids):
            user_id = event.new_chat_member.user.id
            if await subs.is_fully_subscribed(user_id):
                # –°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º
                # Try to delete last reminder in the chat to keep it clean
                target_chat_id = await store.get_chat_id()
                if target_chat_id is None:
                    return
                key = f"notice:{target_chat_id}:{user_id}"
                msg_id = await _last_notice_message.get(key)
                if msg_id:
                    try:
                        await bot.delete_message(chat_id=target_chat_id, message_id=msg_id)
                    except Exception:
                        pass
                    await _last_notice_message.delete(key)

    # –ö–Ω–æ–ø–∫–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –Ω–µ—Ç ‚Äî –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Å–æ–±—ã—Ç–∏—é –∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
    @router.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}) & F.new_chat_members)
    async def welcome_new_members(message: Message) -> None:
        target_chat_id = await store.get_chat_id()
        # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–º; –∏–Ω–∞—á–µ ‚Äî –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö
        if target_chat_id is not None and not _is_target_chat(message.chat.id, target_chat_id):
            return
        logger.info("welcome_new_members: trigger in chat %s, target=%s", message.chat.id, target_chat_id)
        members = message.new_chat_members or []
        mentions: list[str] = []
        for m in members:
            # –ù–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –±–æ—Ç–æ–≤
            if getattr(m, "is_bot", False):
                continue
            user_name = html.escape(getattr(m, "full_name", None) or getattr(m, "first_name", None) or "—É—á–∞—Å—Ç–Ω–∏–∫")
            mentions.append(f'<a href="tg://user?id={m.id}">{user_name}</a>')
        if not mentions:
            return
        text = ", ".join(mentions) + ": –ü—Ä–∏–≤–µ—Ç ü¶ä\u202F–î–µ–ª–∞–π –≤–∑–∞–∏–º–∫—É —Ç—É—Ç, –∏ –∞–∫—Ç–∏–≤ —Ç–µ–±–µ –æ–±–µ—Å–ø–µ—á–µ–Ω! –î–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ! üöÄ"
        try:
            sent = await message.answer(text)
            # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ ~20 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(_delete_message_later(message.bot, message.chat.id, sent.message_id, 20))
            logger.info("welcome_new_members: sent greeting to %s in chat %s", mentions, message.chat.id)
        except Exception:
            pass
        # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ —É–∂–µ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö
        for m in members:
            try:
                await _welcomed_cache.set_until(f"welcomed:{message.chat.id}:{m.id}", 604800)
            except Exception:
                pass

    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Å–æ–±—ã—Ç–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏—à–ª–æ)
    @router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
    async def welcome_on_chat_member(event: ChatMemberUpdated, bot: Bot) -> None:
        chat = event.chat
        if getattr(chat, "type", None) not in {ChatType.GROUP, ChatType.SUPERGROUP}:
            return
        target_chat_id = await store.get_chat_id()
        if target_chat_id is not None and not _is_target_chat(chat.id, target_chat_id):
            return
        logger.info("welcome_on_chat_member: trigger in chat %s, target=%s", chat.id, target_chat_id)
        user = event.new_chat_member.user
        if getattr(user, "is_bot", False):
            return
        user_name = html.escape(getattr(user, "full_name", None) or getattr(user, "first_name", None) or "—É—á–∞—Å—Ç–Ω–∏–∫")
        mention = f'<a href="tg://user?id={user.id}">{user_name}</a>'
        text = mention + ": –ü—Ä–∏–≤–µ—Ç ü¶ä\u202F–î–µ–ª–∞–π –≤–∑–∞–∏–º–∫—É —Ç—É—Ç, –∏ –∞–∫—Ç–∏–≤ —Ç–µ–±–µ –æ–±–µ—Å–ø–µ—á–µ–Ω! –î–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ! üöÄ"
        try:
            sent = await bot.send_message(chat_id=chat.id, text=text)
            asyncio.create_task(_delete_message_later(bot, chat.id, sent.message_id, 20))
            logger.info("welcome_on_chat_member: sent greeting to user %s in chat %s", user.id, chat.id)
        except Exception:
            pass
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ
        try:
            await _welcomed_cache.set_until(f"welcomed:{chat.id}:{user.id}", 604800)
        except Exception:
            pass

    # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @router.edited_message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
    async def guard_edited_message(message: Message) -> None:
        if message.from_user is None or message.from_user.is_bot:
            return
        target_chat_id = await store.get_chat_id()
        if target_chat_id is None:
            return
        if not _is_target_chat(message.chat.id, target_chat_id):
            return
        user_id = message.from_user.id
        if await subs.is_fully_subscribed(user_id):
            return
        try:
            await message.delete()
        except Exception:
            pass

    return router


