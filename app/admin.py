from __future__ import annotations

from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command

from .storage import ConfigStore
import logging


router = Router(name="admin-settings")
logger = logging.getLogger("admin")


def settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(
                    text="üì° –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª",
                    request_chat={"request_id": 43, "chat_is_channel": True, "bot_is_member": True},
                ),
                KeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",
                    request_chat={"request_id": 44, "chat_is_channel": True, "bot_is_member": True},
                ),
            ],
            [
                KeyboardButton(
                    text="üë• –í—ã–±—Ä–∞—Ç—å —á–∞—Ç",
                    request_chat={"request_id": 45, "chat_is_channel": False, "bot_is_member": False},
                ),
                KeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç",
                    request_chat={"request_id": 46, "chat_is_channel": False, "bot_is_member": False},
                ),
            ],
            [
                KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"),
                KeyboardButton(
                    text="üí¨ –ù–∞–∑–Ω–∞—á–∏—Ç—å —á–∞—Ç",
                    request_chat={"request_id": 42, "chat_is_channel": False, "bot_is_member": False},
                ),
            ],
            [KeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    )


def setup_admin(store: ConfigStore, admin_user_ids: set[int]) -> Router:
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    admins = set(admin_user_ids or [])

    def is_not_authorized(user_id: int | None) -> bool:
        if user_id is None:
            return True
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
        if not admins:
            return False
        return user_id not in admins
    @router.message(Command("start"))
    async def start_menu(message: Message) -> None:
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –º–µ–Ω—é; –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî —Ç–∏—à–∏–Ω–∞
        if is_not_authorized(message.from_user.id if message.from_user else None):
            return
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", reply_markup=settings_keyboard())
        logger.debug("menu opened by %s", message.from_user.id if message.from_user else None)

    @router.message(Command("settings"))
    async def show_menu(message: Message) -> None:
        # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if is_not_authorized(message.from_user.id if message.from_user else None):
            return
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", reply_markup=settings_keyboard())

    @router.message(F.text.func(lambda t: (t or "").strip().lower().endswith("–∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")))
    async def close_menu(message: Message) -> None:
        if is_not_authorized(message.from_user.id if message.from_user else None):
            return
        await message.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ", reply_markup=ReplyKeyboardRemove())

    @router.message(F.text.func(lambda t: (t or "").strip().lower().endswith("—Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫") or (t or "").strip().lower().endswith("—Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")))
    async def list_channels(message: Message, bot: Bot) -> None:
        if is_not_authorized(message.from_user.id if message.from_user else None):
            return
        channels = await store.list_channels()
        if not channels:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return
        lines = []
        for ch in channels:
            try:
                chat = await bot.get_chat(ch)
                title = getattr(chat, "title", None) or getattr(chat, "username", None) or "–∫–∞–Ω–∞–ª"
                username_tag = f" (@{chat.username})" if getattr(chat, "username", None) else ""
                lines.append(f"‚Ä¢ {title}{username_tag}")
            except Exception:
                # –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å—ã—Ä–æ–π ID
                if isinstance(ch, str) and ch.startswith("@"):
                    lines.append(f"‚Ä¢ {ch}")
                else:
                    lines.append("‚Ä¢ –∫–∞–Ω–∞–ª")
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n" + "\n".join(lines))
        logger.debug("channels listed: %s", lines)

    # –†—É—á–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —É–±—Ä–∞–Ω; –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–±–æ—Ä

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ request_chat
    @router.message(F.chat_shared)
    async def on_chat_shared(message: Message, bot: Bot) -> None:
        if is_not_authorized(message.from_user.id if message.from_user else None):
            return
        shared = message.chat_shared
        if shared is None:
            return
        if shared.request_id == 42:
            await store.set_chat_id(shared.chat_id)
            await message.answer(f"–¶–µ–ª–µ–≤–æ–π —á–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω: {shared.chat_id}")
            logger.info("target chat set to %s", shared.chat_id)
        elif shared.request_id == 43:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å @username, –µ—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞ –æ–Ω –µ—Å—Ç—å; –∏–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
            identifier = str(shared.chat_id)
            try:
                chat = await bot.get_chat(shared.chat_id)
                if getattr(chat, "username", None):
                    identifier = f"@{chat.username}"
            except Exception:
                pass

            added = await store.add_channel(identifier)
            if added:
                pretty = identifier if identifier.startswith("@") else (getattr(locals().get("chat", None), "title", None) or "–∫–∞–Ω–∞–ª")
                await message.answer(f"–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {pretty}")
            else:
                await message.answer("–¢–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å")
            logger.info("channel added by pick: %s -> %s (added=%s)", shared.chat_id, identifier, added)
        elif shared.request_id == 45:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö
            identifier = str(shared.chat_id)
            try:
                chat = await bot.get_chat(shared.chat_id)
                if getattr(chat, "username", None):
                    identifier = f"@{chat.username}"
            except Exception:
                pass
            added = await store.add_channel(identifier)
            if added:
                pretty = identifier if identifier.startswith("@") else (getattr(locals().get("chat", None), "title", None) or "—á–∞—Ç")
                await message.answer(f"–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {pretty}")
            else:
                await message.answer("–¢–∞–∫–æ–π —á–∞—Ç —É–∂–µ –µ—Å—Ç—å")
            logger.info("group added by pick: %s -> %s (added=%s)", shared.chat_id, identifier, added)
        elif shared.request_id == 44:
            # –£–¥–∞–ª—è–µ–º –ø–æ chat_id; –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ @username, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å username –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
            removed = await store.remove_channel(str(shared.chat_id))
            if not removed:
                try:
                    chat = await bot.get_chat(shared.chat_id)
                    if getattr(chat, "username", None):
                        removed = await store.remove_channel(f"@{chat.username}")
                except Exception:
                    pass
            if removed:
                await message.answer("–ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω")
            else:
                await message.answer("–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
            logger.info("channel removed by pick: %s (removed=%s)", shared.chat_id, removed)
        elif shared.request_id == 46:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
            removed = await store.remove_channel(str(shared.chat_id))
            if not removed:
                try:
                    chat = await bot.get_chat(shared.chat_id)
                    if getattr(chat, "username", None):
                        removed = await store.remove_channel(f"@{chat.username}")
                except Exception:
                    pass
            if removed:
                await message.answer("–ß–∞—Ç —É–¥–∞–ª—ë–Ω")
            else:
                await message.answer("–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
            logger.info("group removed by pick: %s (removed=%s)", shared.chat_id, removed)

    return router


